@model IEnumerable<Sireed.APPLICATION.DTO.RegionDTO>

@* <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualisation Solar Terminator</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .land {
            fill: #ccc;
            stroke: #333;
        }
        .terminator {
            stroke: red;
            stroke-width: 2;
            fill: none;
        }

        svg {
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <h1>Visualisation de la Région</h1>
    <svg width="800" height="600"></svg>
    <script>
        const width = 800;
        const height = 600;

        // Projection de la carte
        const projection = d3.geoMercator()
            .center([-6.5, 31.5]) // Centre sur le Maroc
            .scale(100000)
            .translate([width / 2, height / 2]);

        const path = d3.geoPath().projection(projection);

        // Charger la carte du Maroc (GeoJSON)
        d3.json('GeoJson/maroc.geojson')
            .then(geoData => {
                const svg = d3.select("svg");

                // Ajouter la carte à l'SVG
                svg.append("g")
                    .selectAll("path")
                    .data(geoData.features)
                    .enter().append("path")
                    .attr("class", "land")
                    .attr("d", path);

                // Dessiner le Solar Terminator
                drawTerminator(svg);
            })
            .catch(error => {
                console.error("Erreur lors du chargement du GeoJSON: ", error);
            });

        // Dessiner le Solar Terminator pour le Maroc
        function drawTerminator(svg) {
            const terminatorCoordinates = [];

            // Coordonnées simulées pour le terminator
            for (let lat = 36; lat >= 30; lat -= 0.1) {
                const lon = -5; // Longitude indicative
                terminatorCoordinates.push([lon, lat]);
            }

            const lineFunction = d3.line()
                .x(d => projection([d[0], d[1]])[0])
                .y(d => projection([d[0], d[1]])[1]);

            svg.append("path")
                .datum(terminatorCoordinates)
                .attr("class", "terminator")
                .attr("d", lineFunction);
        }
    </script>
</body>
</html>
 *@

@* <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualisation Solar Terminator</title>

    <!-- Inclure Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

    <!-- Inclure D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <!-- Inclure Leaflet JS -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <style>
        .land {
            fill: #ccc;
            stroke: #333;
        }

        .terminator {
            stroke: red;
            stroke-width: 2;
            fill: none;
        }

        svg {
            border: 1px solid black;
        }

        #map {
            height: 600px; /* Ajustez la hauteur de la carte */
        }
    </style>
</head>

<body>
    <h1>Visualisation de la Région</h1>
    <div id="map"></div> <!-- Conteneur pour Leaflet -->

    <script>
        // Initialiser la carte avec Leaflet
        var map = L.map('map').setView([31.5, -6.5], 6); // Coordonnées centrées sur le Maroc

        // Ajouter une couche de tuiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Charger la carte du Maroc (GeoJSON)
        d3.json('GeoJson/maroc.geojson') // Assurez-vous que le chemin est correct
            .then(geoData => {
                // Ajouter le GeoJSON à la carte Leaflet
                L.geoJSON(geoData).addTo(map);
            })
            .catch(error => {
                console.error("Erreur lors du chargement du GeoJSON: ", error);
            });
    </script>
</body>
</html> *@

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualisation de la Carte avec Leaflet et D3.js</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        #map {
            height: 500px; /* Hauteur de la carte */
            width: 1000px; /* Largeur de la carte */
        }
    </style>
</head>
<body>
    <h1>Visualisation de la Région Rabat-Salé-Kénitra</h1>
    <div id="map"></div> <!-- Div pour la carte Leaflet -->

    <script>
        // Initialiser la carte avec Leaflet
        var map = L.map('map').setView([31.5, -6.5], 6); // Coordonnées centrées sur le Maroc

        // Ajouter une couche de tuiles esthétiques
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
        }).addTo(map);

        // Charger la carte du Maroc (GeoJSON)
        d3.json('GeoJson/maroc.geojson') // Assurez-vous que le chemin est correct
            .then(geoData => {
                // Filtrer pour ne garder que les caractéristiques de Rabat-Salé-Kénitra
                const rabatSaleknitra = geoData.features.filter(feature => {
                    return feature.properties.name === "Rabat-Salé-Kénitra"; // Modifiez selon la propriété correcte
                });

                // Ajouter le GeoJSON filtré à la carte Leaflet avec un style personnalisé
                L.geoJSON(rabatSaleknitra, {
                    style: function (feature) {
                        return {
                            color: '#00509E',
                            weight: 2,
                            fillColor: 'rgba(100, 149, 237, 0.6)',
                            fillOpacity: 0.6
                        };
                    },
                    onEachFeature: function (feature, layer) {
                        layer.on({
                            mouseover: function (e) {
                                layer.setStyle({
                                    fillOpacity: 0.8
                                });
                            },
                            mouseout: function (e) {
                                layer.resetStyle(e.target);
                            },
                            click: function (e) {
                                // Action au clic
                            }
                        });
                    }
                }).addTo(map);
            })
            .catch(error => {
                console.error("Erreur lors du chargement du GeoJSON: ", error);
            });
    </script>
</body>
</html>


@* <!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualisation Solar Terminator</title>

    <!-- Inclure Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

    <!-- Inclure D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>

    <!-- Inclure Leaflet JS -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <style>
        .land {
            fill: rgba(100, 149, 237, 0.6); /* Remplissage avec une couleur semi-transparente */
            stroke: #00509E; /* Couleur du bord */
            stroke-width: 2;
        }

            .land:hover {
                fill: rgba(100, 149, 237, 0.8); /* Changement de couleur au survol */
            }

        .terminator {
            stroke: red;
            stroke-width: 2;
            fill: none;
            opacity: 0.7; /* Légère transparence */
        }

        #map {
            height: 100vh; /* Adapter la hauteur de la carte pour remplir la fenêtre */
            border-radius: 20px
        }
    </style>
</head>

<body>
    <h1>Visualisation de la Région</h1>
    <div id="map"></div> <!-- Conteneur pour Leaflet -->

    <script>
        // Initialiser la carte avec Leaflet
        var map = L.map('map').setView([31.5, -6.5], 6); // Coordonnées centrées sur le Maroc

        // Ajouter une couche de tuiles esthétiques
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
        }).addTo(map);

        // Charger la carte du Maroc (GeoJSON)
        d3.json('GeoJson/maroc.geojson') // Assurez-vous que le chemin est correct
            .then(geoData => {
                // Filtrer pour ne garder que les caractéristiques de Rabat-Salé-Kénitra
                const rabatSaleknitra = geoData.features.filter(feature => {
                    return feature.properties.name === "Rabat-Salé-Kénitra"; // Modifiez selon la propriété correcte
                });

                // Ajouter le GeoJSON filtré à la carte Leaflet avec un style personnalisé
                L.geoJSON(rabatSaleknitra, {
                    style: function (feature) {
                        return {
                            color: '#00509E',
                            weight: 2,
                            fillColor: 'rgba(100, 149, 237, 0.6)',
                            fillOpacity: 0.6
                        };
                    },
                    onEachFeature: function (feature, layer) {
                        layer.on({
                            mouseover: function (e) {
                                layer.setStyle({
                                    fillOpacity: 0.8
                                });
                            },
                            mouseout: function (e) {
                                layer.resetStyle(e.target);
                            },
                            click: function (e) {
                                // Action au clic
                            }
                        });
                    }
                }).addTo(map);
            })
            .catch(error => {
                console.error("Erreur lors du chargement du GeoJSON: ", error);
            });

    </script>
</body>
</html> *@
